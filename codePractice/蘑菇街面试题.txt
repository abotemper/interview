1.rem是什么
CSS 中 REM 是什么？
REM 代表 font size of the Root element，即 Root EM。REM 是值/数据类型长度的值。
长度的另外一个值是我们老朋友 - 像素 px。每个接受长度作为值的属性都接受 REM 值。
比如：margin, padding, font-size 等。
我们为什么需要考虑使用 REM 单位呢？
绝对长度值
绝对长度值的例子如：px - 等于 1/96 英寸，cm - 相当于 37.8 px 或者 25.2/64 英寸。更多的内容，
参考 MDN。
当你使用这些长度的时，你可以确定它们的大小始终大致相同。当你知道确切的尺寸的时候，这很有用。
但是，不要忘记了，人们可能使用不同的浏览器设置，无论是基于喜好还是访问性需求的原因。
相对长度值
相对长度值是根据其他一些值参考的。也就是说要有第 1 参考值。相对长度有 REM，EM，vw 和 vh 等。
EM 的定义：

父元素定义的 font-size 值
子元素相对父元素 font-size 处理长度值



2.实现一个空心圆
 .circle{
  position:fixed;
  bottom:0;               
  left:0;               
  width:100px;                
  height:100px;                
  border:50px solid #000;                
  border-radius:100px;
  }

4.实现三角形
.triangle {
		width: 0;
		height: 0;
		border-left: 69px solid transparent;  
		border-right: 69px solid transparent;  
		border-bottom: 120px solid skyblue; 
}

5.数组去重的方法，如果数据量大呢
set + Array.from()
双循环+splice去重对NaN无法去重
用额外的数组，用indexOf，如果没有（-1）就存入
用includes方法

6.一行文字太多，超出的部分用...代替，如何实现的
width:300rpx; 框定内容区域大小，也可通过其他方式去框定
overflow: hidden; //超出内容隐藏
text-overflow: ellipsis； //用省略号来代表被隐藏掉的文本
white-space: nowrap; //强制文本在一行显示

7.文本缩进是用了什么，如何设置单位。
css设置text-indent，用em就缩进了， -2em就是缩进两格

说一下你理解的前端开发流程？
需求评审
需求分析
等视觉与交互设计
项目开发，与视觉和交互设计保持一致
自测功能和样式
前后端联调，调整接口功能与字段限制
视觉与交互验收
产品验收
提交测试
线上接口回归
新项目的上线前准备
（资源申请
沙河环境部署测试
线上部署测试）


如何理解 JavaScript 闭包？
我们在某些情况下，希望某些函数内的变量在函数执行后不被销毁

JavaScript 基本数据类型？
String（字符串）： string类型是JavaScript中较为重要的类型，用来表示字符串。
Number （数字）： 用来表示数字串。主要有整数、小数、NAN等。
boolean（布尔）： 即布尔类型，该类型有两个值：true false
null（空）： 可以通过将变量的值设置为 null 来清空变量
undefined（未定义）： 表示变量不含有值
symbol（符号）： ES6，主要防止命名冲突。
object（对象）： 对象，除了基本数据类型其他都是对象。数组是对象、函数是对象、正则表达式也是对象。


Undifined 和 Null 的区别？
一、JS 中的 null
1. 描述：
① 是 JavaScript 基本类型之一，特指对象的值未设置，是表示缺少的标识，指示变量未指向任何对象，
把 null 看为尚未创建的对象，也许更好理解；
② 是一个字面量，不像 undefined，它不是全局对象的一个属性；
③ 在布尔运算中被认为是 false；
④ 与其他任何对象一样永远不会被 JavaScript 隐式赋值给变量。
注：如果 JavaScript 预期某个位置应该是布尔值，会将该位置上现有的值自动转为布尔值。
转换规则是除了下面六个值被转为 false，其他值都视为 true。
undefined
null
false
0
NaN
"" 或 ''（空字符串）
2. 典型用法：
（1） 作为函数的参数，表示该函数的参数为空。
（2） 作为对象原型链的终点。

二、JS 中的 undefined
描述：
① 是 JavaScript 基本类型之一，表示 “缺少值”，就是此处应该有一个值，但是还没有定义；
② 是 JavaScript 在运行时创建的全局变量，是全局对象的一个属性；
③ 在布尔运算中被认为是 false。
注：有关全局对象和全局变量，可参考 javascript 全局对象与全局变量

典型用法：
（1）变量被声明但没有赋值时，就等于 undefined。、、、、、、、、、、、、、、、、、
（2）对象的某个属性没有赋值时，该属性的值为 undefined。
（3）调用函数过程中，应该提供的参数没有提供时，该参数就等于 undefined。
（4）函数没有返回值时，默认返回 undefined。
null == undefined, 但null === undefined不行
2. 在数字运算中被转换为 number 类型的值不同
在 null 上执行算术转换时，确定的值为 0
undefined 得出的结果为 NaN

了解的 JavaScript 数组方法？
foreach，map，pop，push，shift，unshift, splice（开始索引，多少个），reverse, sort,
concat合并数组， 
join,slice（开始索引，结束索引），indexOf有返回索引没有返回-1， lastIndexOf从右找，
filter，every全都满足返回true不满足false，some有一个满足就true全不满足false，
find返回满足的第一个数据没有就是undefined
reduce叠加

CSS单位 rem 和 em 的区别？
在寻找在 CSS 中指定长度的方法时，我们有很多选择。所有在 CSS 中指定长度的单位都属于两类。

绝对长度：绝对长度，顾名思义，是绝对的；它们是固定的，不与任何东西相对。这意味着无论发生什么，
它们都是相同的尺寸。绝对长度包括 cm、mm、in、px、pts 和 pc。
相对长度：相对长度是指相对于另一个单位指定长度的单位，也就是说，它们基于其他指定的单位或元素作出反应。
它们包括 %、vmax、vmin、vh、vw、ch、ex，以及我们将要讨论的单位 em 和 rem。
就像上面说的，CSS 中的 em 单位是一个相对的测量单位，用于测量网页上元素的大小，主要是字体大小。
因为它是相对于其父元素而言的，所以 1 个 em 等于父元素中设置的字体大小。
这意味着如果你将父 div 中的字体大小设置为 20px，并将子 div 的字体大小设置为 2em，
那么子 div 中的字体大小将等于 40px。
em 单位很有用，因为它允许你根据之前所说的元素的字体大小来调整页面上的元素的大小，
这有助于创建一个一致的视觉层次结构。这对创建无障碍网站很有帮助，可以让有视觉障碍的用户容易阅读。
需要注意的是，如果你没有指定父元素的值，浏览器的默认值会被当作父元素。
现在我们知道了什么是 em，我们来看看 rem。rem 是 CSS 中另一个测量长度的单位，它代表 root em。
既然我们知道 em 等于当前字体的尺寸，我们就可以推断出 root em 是指根元素的字体尺寸，
而根元素通常是指 <html> 元素。
和 em 一样，rem 也是从父元素那里继承它的大小，但 rem 看的父元素不是它上面的 div 或 section，
而是围绕它的第一个元素，也就是 html 元素。让我们用前面的代码做一个例子。同样的 html 代码，
只是多了一个 div。

现在，你已经知道了 em 和 rem 的区别，但为了清楚起见，我想重述一下这两个值的区别。
 在 CSS 中，rem 单位只相对于文档的根元素，而 em 单位只相对于目标元素的直接父元素。
 这意味着 em 的大小是继承自父元素的，而 rem 的大小只继承自根元素。



了解的原生 JavaScript 方法？
document.getElementById 根据Id，获取元素
document.createElement 创建元素
document.getElementsByTagName 根据元素名称，获取元素（返回数组）
appendChild 追加元素
document.documentElement.clientWidth 获取宽高
document.documentElement.clientHeight 获取宽高
document.documentElement.scrollTop 滚动条位置
document.body.scrollTop 滚动条位置
xxx.className 设置class属性值
xxx.innerHTML 插入html代码
xxx.style.cssText 设置样式内容
xxx.style.display 设置样式内容



行内样式（style）（权重1000）> ID（权重100） > 类（权重10）> 标签选择器（权重1） > 通用选择器（权重0）
1. 权重值越大，优先级越高
2. 选择器选择的范围越小越精确，优先级越高
!important 直接最优先
CSS里面的进制并不是10进制，而是256进制，所以10个低级选择器并不能等于1个高级选择器

如何理解 HTML 语义化？
1增加可读性
2让搜索引擎更容易读懂（seo）

块状元素&内联元素：
display:block/table; 有 div h1 h2 table ul ol p 独占一行
display:inline/inline-block; 有 span img input button 

盒子模型宽度计算
offsetWidth = (内容宽度 + 内边距 + 边框)， 无外边距
box-sizing: border-box;

margin 纵向重叠问题
相邻元素的margin-top和margin-bottom 会发生重叠
空白内容的<p></p>也会重叠

margin负值问题
margin-top 和 margin-left 负值，元素向上，向左移动
margin-right负值，右侧元素左移，自身不受影响
margin-right负值，下侧元素上移，自身不受影响

bfc是什么
bfc是一块独立渲染区域，内部元素的渲染不会影响边界以外元素
形成bfc的条件
float不是none
position是absolute或fixed
overflow 不是visible
display是flex inline-block

bfc常见的应用
清除浮动，比如一个图片如果不清除浮动就会从文档流里跑出去，会把容器撑大


如何取消一个事件监听？
'==' 和 '===' 的区别？
‘==’用来进行比较检测两个操作数是否相等，可以允许进行类型转换，先进行类型转换
‘===’用于严格比较，只要类型不匹配就返回false


如何选择前端框架？
你的优点和缺点是什么？
当你在一个团队的时候，你的憧憬是什么？
还有什么想问我的？

1.垂直居中

自我介绍

实习做的事，遇到了哪些困难，做了什么优化

排序算法（手写快排）

js继承（手写两个）

new的过程：
1.创建一个空对象 const person = {}
2.将对象obj的__proto__指向构造函数的prototype： person.__proto__ = Person.prototype
3.将构造函数中的this指向这个obj并且执行构造函数代码，给对象obj添加属性，方法等：
  Person.call(person, 'wu', 26)
4.返回这个对象：return person

虚拟dom（解决了什么困难）

ajax过程
Ajax的工作原理相当于在用户和服务器之间加了一个中间层(AJAX引擎)，
使用户操作与服务器响应异步化。客户端发送请求，请求交给xhr，xhr把请求提交给服务器，
服务器进行业务处理，服务器响应数据交给xhr对象，xhr对象接收数据，由javascript把数据写到页面上

1.建立XMLHttpRequest对象;
2.设置回调函数;
3.配置请求信息，(如open,get方法)，使用open方法与服务器建立链接;
4.向服务器发送数据;
5.在回调函数中针对不同的响应状态进行处理;

ajax中的五种状态码
0：请求未初始化
1：服务器连接已建立(已调用open方法，但还未调用send)
2：请求已接收(已调用send方法)
3：请求处理中(请求已到达服务端，正在处理)
4：请求已完成，且响应已就绪
状态： 200——正确、404——未找到页面、500——错误


apply 、 call 、bind异同
绑定this
apply接受两个参数，第二个参数是要传入this的变量，以[]的方式
call除了第一个参数，后面的参数要罗列进去
bind和call类似，但参数可以多次传入，而且返回一个新的函数，

深浅拷贝

瀑布流实现
column 多行布局实现瀑布流
column 实现瀑布流主要依赖两个属性。
column-count 属性，是控制屏幕分为多少列。
column-gap 属性，是控制列与列之间的距离。
  <style>
    .box {
          margin: 10px;
          column-count: 3;
          column-gap: 10px;
      }
      .item {
          margin-bottom: 10px;
      }
      .item img{
          width: 100%;
          height:100%;
      }
  </style>

flex 弹性布局实现瀑布流
flex 实现瀑布流需要将最外层元素设置为 display: flex，使用弹性布局
flex-flow:column wrap 使其纵向排列并且换行换行
设置 height: 100vh 填充屏幕的高度，也可以设置为单位为 px 的高度，来容纳子元素。
每一列的宽度可用 calc 函数来设置，即 width: calc(100%/3 - 20px)。
分成等宽的 3 列减掉左右两遍的 margin 距离。
  <style>
    .box {
        display: flex;  
        flex-flow: column wrap;
        height: 100vh;
      }
      .item {
        margin: 10px;
        width: calc(100%/3 - 20px);
      }
      .item img{
        width: 100%;
        height:100%;
      }
  </style>


重排重绘：
页面生成的过程：：
1.HTML 被 HTML 解析器解析成 DOM 树；
2.CSS  被 CSS 解析器解析成 CSSOM 树；
3.结合 DOM 树和 CSSOM 树，生成一棵渲染树(Render Tree)，这一过程称为 Attachment；
4.生成布局(flow)，浏览器在屏幕上“画”出渲染树中的所有节点；
5.将布局绘制(paint)在屏幕上，显示出整个页面。
第四步和第五步是最耗时的部分，这两步合起来，就是我们通常所说的渲染。
渲染：
在页面的生命周期中，网页生成的时候，至少会渲染一次。在用户访问的过程中，
还会不断触发重排(reflow)和重绘(repaint)，不管页面发生了重绘还是重排，
都会影响性能，最可怕的是重排，会使我们付出高额的性能代价，所以我们应尽量避免。
重拍比重绘大：：
重绘：某些元素的外观被改变，例如：元素的填充颜色
重排：重新生成布局，重新排列元素。

就如上面的概念一样，单单改变元素的外观，肯定不会引起网页重新生成布局，但当浏览器完成重排之后，
将会重新绘制受到此次重排影响的部分。比如改变元素高度，这个元素乃至周边dom都需要重新绘制。
也就是说：重绘不一定导致重排，但重排一定会导致重绘。
重排：：
概念：
当DOM的变化影响了元素的几何信息(元素的的位置和尺寸大小)，浏览器需要重新计算元素的几何属性，将其安放在界面中的正确位置，这个过程叫做重排。
重排也叫回流，简单的说就是重新生成布局，重新排列元素。
下面情况会发生重排：

页面初始渲染，这是开销最大的一次重排
添加/删除可见的DOM元素
改变元素位置
改变元素尺寸，比如边距、填充、边框、宽度和高度等
改变元素内容，比如文字数量，图片大小等
改变元素字体大小
改变浏览器窗口尺寸，比如resize事件发生时
激活CSS伪类（例如：:hover）
设置 style 属性的值，因为通过设置style属性改变结点样式的话，每一次设置都会触发一次reflow
查询某些属性或调用某些计算方法：offsetWidth、offsetHeight等，除此之外，当我们调用 
getComputedStyle方法，或者IE里的 currentStyle 时，也会触发重排，原理是一样的，
都为求一个“即时性”和“准确性”。
重排影响的范围：
由于浏览器渲染界面是基于流式布局模型的，所以触发重排时会对周围DOM重新排列，影响的范围有两种：

全局范围：从根节点html开始对整个渲染树进行重新布局。
局部范围：对渲染树的某部分或某一个渲染对象进行重新布局
局部范围重排：

用局部布局来解释这种现象：把一个dom的宽高之类的几何信息定死，然后在dom内部触发重排，
就只会重新渲染该dom内部的元素，而不会影响到外界。
重绘：
概念：
当一个元素的外观发生改变，但没有改变布局,重新把元素外观绘制出来的过程，叫做重绘。
重排的代价是高昂的，会破坏用户体验，并且让UI展示非常迟缓。
通过减少重排的负面影响来提高用户体验的最简单方式就是尽可能的减少重排次数，
重排范围。下面是一些行之有效的建议，大家可以用来参考。
减少重排范围
我们应该尽量以局部布局的形式组织html结构，尽可能小的影响重排的范围。


尽可能在低层级的DOM节点上，而不是像上述全局范围的示例代码一样，如果你要改变p的样式，
class就不要加在div上，通过父元素去影响子元素不好。

不要使用 table 布局，可能很小的一个小改动会造成整个 table 的重新布局。
那么在不得已使用table的场合，可以设置table-layout:auto;
或者是table-layout:fixed这样可以让table一行一行的渲染，这种做法也是为了限制reflow的影响范围。

减少重排次数
1.样式集中改变
不要频繁的操作样式，对于一个静态页面来说，明智且可维护的做法是更改类名而不是修改样式，
对于动态改变的样式来说，相较每次微小修改都直接触及元素，更好的办法是统一在 cssText 变量中编辑。
虽然现在大部分现代浏览器都会有 Flush 队列进行渲染队列优化，但是有些老版本的浏览器比如IE6的效率依然低下。

减少重排次数
1.样式集中改变
不要频繁的操作样式，对于一个静态页面来说，明智且可维护的做法是更改类名而不是修改样式，
对于动态改变的样式来说，相较每次微小修改都直接触及元素，更好的办法是统一在 cssText 变量中编辑。
虽然现在大部分现代浏览器都会有 Flush 队列进行渲染队列优化，但是有些老版本的浏览器比如IE6的效率依然低下。
2.分离读写操作
DOM 的多个读操作（或多个写操作），应该放在一起。不要两个读操作之间，加入一个写操作。

3.将 DOM 离线
“离线”意味着不在当前的 DOM 树中做修改，我们可以这样做：


使用 display:none
一旦我们给元素设置 display:none 时（只有一次重排重绘），元素便不会再存在在渲染树中，
相当于将其从页面上“拿掉”，我们之后的操作将不会触发重排和重绘，添加足够多的变更后，
通过 display属性显示（另一次重排重绘）。通过这种方式即使大量变更也只触发两次重排。
另外，visibility : hidden 的元素只对重绘有影响，不影响重排。

通过 documentFragment 创建一个 dom 碎片,在它上面批量操作 dom，操作完成之后，再添加到文档中，
这样只会触发一次重排。

复制节点，在副本上工作，然后替换它！

4.使用 absolute 或 fixed 脱离文档流
使用绝对定位会使的该元素单独成为渲染树中 body 的一个子元素，重排开销比较小，不会对其它节点造成太多影响。
当你在这些节点上放置这个元素时，一些其它在这个区域内的节点可能需要重绘，但是不需要重排。

5.优化动画
可以把动画效果应用到 position属性为 absolute 或 fixed 的元素上，这样对其他元素影响较小。
动画效果还应牺牲一些平滑，来换取速度，这中间的度自己衡量：
比如实现一个动画，以1个像素为单位移动这样最平滑，但是Layout就会过于频繁，大量消耗CPU资源，
如果以3个像素为单位移动则会好很多

启用GPU加速
GPU 硬件加速是指应用 GPU 的图形性能对浏览器中的一些图形操作交给 GPU 来完成，
因为 GPU 是专门为处理图形而设计，所以它在速度和能耗上更有效率。
GPU 加速通常包括以下几个部分：Canvas2D，布局合成, CSS3转换（transitions），
CSS3 3D变换（transforms），WebGL和视频(video)。

小结：

渲染的三个阶段 Layout，Paint，Composite Layers。
Layout：重排，又叫回流。
Paint:重绘，重排重绘这些步骤都是在 CPU 中发生的。
Compostite Layers：CPU 把生成的 BitMap（位图）传输到 GPU，渲染到屏幕。
CSS3 就是在 GPU 发生的：Transform  Opacity。在 GPU 发生的属性比较高效。所以 CSS3 性能比较高。




为什么Object.defineProperty监听不到数组长度等变化

输入url到页面展示过程

有什么要问的

* 面试官自我介绍。
* 自己的自我介绍。

* 关于前端工程化的理解：
压缩工具：项目上线前，压缩代码。例如将文件内容中的注释、空格等删除，见换行变成一行，例如 minify
转换工具：例如将ES6、CSS3新特性进行转换，解决兼容性问题
Less、Sass等 CSS 的预编译语言进行编译处理
Vue、React等 JS 库进行转换
格式化格局：多人开发、统一开发规范，例如ESLint、Prettier等
自动化工具：自动化构建（npm script & script hooks等）、自动化部署（Git Hook、CI/CD等）、自动化测试（Jest、mocha等）
脚手架工具：专用脚手架、通用脚手架

通用脚手架：Yeoman、Plop
专用脚手架：vue-cli、create-react-app、angular-cli


模块化打包：Webpack、Rollup、Parcel
前端使用到大部分工具都是用 Node.js 进行开发的
工程化 !== 某个工具（例如webpack）
脚手架

前端工程化的发起者
作用：创建项目基础结构、提供项目规范和约定
通用脚手架：Yeoman

Yeoman 是一款脚手架工具：可以帮助开发人员创建项目的基础结构代码
yo 是 Yeoman 的命令行管理工具：可以在命令行运行yeoman的命令
生成器：Yeoman中具体的脚手架：针对不同项目有不同的脚手架（例如：网站、APP、小程序等）
Yeoman使用说明

* es6常见用法。
* this： 
1.在方法中，this指的是所有者对象。
2.单独的情况下，this指的是全局对象。
3.在函数中，this指的是全局对象。
4.在函数中，严格模式下，this指的是undefined。
5.在事件中，this指的是接收事件的元素。

* es6中的this。
* 作用域链。全局，函数，块（代码块{}中的let，const），如果在当前域内找不到变量就往上找
* es6的普通方法和lodash的选择。
* cookie, localStorage, sessionStorage的区别。
* 严格模式下，在全局作用域使用this会发生什么事情。
* let, const, var的区别。

前端性能优化：
原则：多使用内存，缓存或其他方法--快/减少cpu计算量，减少网络加载耗时（空间换时间）
从何入手：让加载更快，让渲染更快
让加载更快：
1减少资源体积，比如压缩代码，webpack打包后就压缩了
2减少访问次数，比如合并代码（可以减少访问文件次数，各种scriptjs合并成一个），比如css雪碧图，一张图通过操作显示不同部分，
 SSR服务器端渲染（服务端直接先把东西全拿到，然后一次给前端，网页和数据一起加载，一起渲染
 前后端分离模式即非ssr，先加载网页，再加载数据，再渲染数据），缓存（有缓存就可以不用重新加载）
3使用更快的网络：cdn，即内容分发网络，CDN系统能够实时地根据网络流量和各节点的连接、
 负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。
 其目的是使用户可就近取得所需内容，解决Internet网络拥挤的状况，提高用户访问网站的响应速度。
 CDN节点解决了跨运营商和跨地域访问的问题，访问延时大大降低；
 大部分请求在CDN边缘节点完成，CDN起到了分流作用，减轻了源站的负载。

让渲染更快：
1css放在head，js放在body最下面
2尽早开始执行js，用DOMContentLoaded触发
3懒加载（图片懒加载，上滑加载更多）
4对DOM查询进行缓存
5频繁DOM操作，合并到一起插入DOM结构，可以缓存DOM查询
6节流防抖，渲染更加流畅
